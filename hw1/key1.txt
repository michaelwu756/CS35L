1.1
C-s P U B L I C Enter
C-s L a b o r a t o r y Enter
C-s s e l f - r e f e r e n t i a l Enter
C-s a r r o w Enter
C-a
C-e
C-x C-c

1.2
M-x r e p l a c e - r e g e x p Enter < ! - - \ ( . * ? C-q C-j ? \ )
* ? - - > Enter Enter
C-x C-s
C-x C-c

1.3
M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 37 Enter y y
Enter
M-<
M-% U T F - 8 Enter U S - A S C I I Enter y Enter
M-<
C-s < / o l > Enter C-a Enter
C-x C-s y e s Enter
C-x C-c

1.4
M->

C-u 3 9 8 M-g M-g
C-f C-k C-y
C-u 3 5 3 M-g M-g C-y

C-u 3 8 9 M-g M-g
C-f C-k C-k C-y
C-u 3 3 8 M-g M-g C-y C-k C-k

C-u 3 8 0 M-g M-g
C-f C-k C-y
C-u 3 0 3 M-g M-g C-y

C-u 3 7 9 M-g M-g
C-f C-k C-k C-y
C-u 3 0 3 M-g M-g C-y

C-u 3 7 9 M-g M-g
C-f C-k C-k C-y
C-u 3 0 3 M-g M-g C-y

C-u 3 7 1 M-g M-g
C-f C-k C-y
C-u 9 3 M-g M-g C-y

C-u 3 6 2 M-g M-g
C-f C-k C-y
C-u 1 8 M-g M-g C-y

C-u 3 5 6 M-g M-g
C-@ M-> C-w C-x u

C-u 3 5 6 M-g M-g
< ! - -
M-x r e p l a c e - s t r i n g Enter - - > Enter Enter
M-> - - >

M-< M-x c o u n t - m a t c h e s Enter < o l > Enter
there are 7 matches

M-< M-x r e p l a c e - s t r i n g Enter < o l > Enter < O L > Enter

C-x C-s
C-x C-c

1.5
M-x m a k e - d i r e c t o r y Enter j u n k Enter.
C-x C-d j u n k Enter
C-x C-f h e l l o . c Enter
M-x c o m p i l e Enter
Backspace Backspace Backspace Backspace
Backspace Backspace Backspace Backspace
g c c SP h e l l o . c SP - o SP h e l l o
C-x C-f h e l l o - o u t Enter
C-u M-! . / h e l l o Enter
C-a C-@ M-> M-w
C-x C-f k e y 1 . t x t Enter
M-> Enter Enter C-y

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

1.6
C-x b * s c r a t c h * Enter
( r a n d o m ) C-j
( s e t q SP x SP ( r a n d o m ) ) C-j
( s e t q SP y SP ( r a n d o m ) ) C-j
( * SP x SP y ) C-j

The product of the two variables is -1105638842699773969
The result here is not correct. It seems random. This is probably
because the integer could not hold a large enough integer and the
value overflowed.

M-: ( * SP x SP y ) Enter

There is the same product, but there is an extra part added to the
output.

No, the two integers are not truly random. They are not random because
the computer generated them using some formula.

The probability is effectively zero. There are an infinite number of
random integers that will cause an overflow, while only a finite
number of integers that do not cause an overflow.
